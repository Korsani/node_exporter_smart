#!/usr/bin/env perl
use strict;
use warnings;
open(L,'lsblk|') or die "$!";
my %smart_g;
my %smart_id;
our $pref=shift;
die "You must provide a prefix:  $0 <prefix>\n" if (not $pref);
warn "This script should be run as root. Unexpected behaviours ahead...\n" if ($>);
sub get_devices() {
	my @devices;
	if ($^O eq 'linux') {
		open(L,'lsblk|') or die "$!";
		while(<L>) {
			next unless $_=~/.*disk.*/; # disk for linux, gpt for freebsd
			my @a=split(/ +/);
			push @devices,('/dev/'.$a[0]);
		}
	}
	if ($^O eq 'freebsd') {
		open(L,'geom disk list|') or die "$!";
		while (<L>) {
			next unless $_=~/.*Name: (.*)/; # disk for linux, gpt for freebsd
			push @devices,('/dev/'.$1);
		}
	}
	return @devices;
}
foreach my $dev (get_devices()) {
	open(S,"smartctl -A $dev|") or die "$!";
	my %smart;
	while(<S>) {
		next unless $_=~/.*0x00.*/;
		# Wipe leading numbers
		$_=~s/....(.*)/$1/;
		my @a=split(/ +/);chomp @a;
		my $id=lc($a[0]);
		# Prom doesn't like -
		$id=~s/-/_/g;
		$smart_id{$id}=1;
		$smart{$id}=$a[8];
	}
	$smart_g{$dev}=\%smart;
}
map { my $id=$_;printf '# TYPE %s_%s counter'."\n",$pref,$id;foreach my $dev (keys %smart_g) { printf '%s_%s{device="%s"} %d'."\n",$pref,$id,$dev,$smart_g{$dev}{$id} if exists $smart_g{$dev}{$id}; }} keys %smart_id;

